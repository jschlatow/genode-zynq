create_boot_directory

import_from_depot [depot_user]/src/[base_src] \
                  [depot_user]/pkg/[drivers_nic_pkg] \
                  [depot_user]/pkg/depot_download \
                  [depot_user]/src/nic_router \
                  [depot_user]/src/vfs_lxip \
                  [depot_user]/src/depot_deploy \
                  [depot_user]/src/depot_query \
                  [depot_user]/src/fs_rom

set config {
<config>
	<parent-provides>
		<service name="ROM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
	</parent-provides>

	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>

	<default caps="100"/>}

proc depot_user_download { user } {
	return [exec cat [select_from_repositories sculpt/depot/$user/download]] }

proc depot_user_pubkey { user } {
	return [exec cat [select_from_repositories sculpt/depot/$user/pubkey]] }

append config {
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Timer"/> </provides>
	</start>

	<start name="drivers" caps="1000" managing_system="yes">
		<resource name="RAM" quantum="32M"/>
		<binary name="init"/>
		<route>
			<service name="ROM" label="config"> <parent label="drivers.config"/> </service>
			<service name="Timer"> <child name="timer"/> </service>
			<service name="Uplink"> <child name="nic_router"/> </service>
			<any-service> <parent/> </any-service>
		</route>
	</start>

	<start name="nic_router" caps="200">
		<resource name="RAM" quantum="10M"/>
		<provides>
			<service name="Nic"/>
			<service name="Uplink"/>
		</provides>
		<config verbose_domain_state="yes">

			<policy label_prefix="depot_download" domain="downlink"/>
			<policy label_prefix="drivers"        domain="uplink"/>

			<domain name="uplink">

				<nat domain="downlink"
				     tcp-ports="16384"
				     udp-ports="16384"
				     icmp-ids="16384"/>

			</domain>

			<domain name="downlink" interface="10.0.3.1/24">

				<dhcp-server ip_first="10.0.3.2" ip_last="10.0.3.2" dns_config_from="uplink"/>

				<tcp dst="0.0.0.0/0"><permit-any domain="uplink" /></tcp>
				<udp dst="0.0.0.0/0"><permit-any domain="uplink" /></udp>
				<icmp dst="0.0.0.0/0" domain="uplink"/>

			</domain>

		</config>
	</start>

	<start name="vfs">
		<resource name="RAM" quantum="20M"/>
		<provides> <service name="File_system"/> </provides>
		<config>
			<vfs>
				<dir name="depot">
					<dir name="genodelabs">
						<ram/>
						<inline name="download">} [depot_user_download genodelabs] {</inline>
						<inline name="pubkey">}   [depot_user_pubkey   genodelabs] {</inline>
					</dir>
					<dir name="jschlatow">
						<ram/>
						<inline name="download">} [depot_user_download jschlatow] {</inline>
						<inline name="pubkey">}   [depot_user_pubkey   jschlatow] {</inline>
					</dir>
				</dir>
				<dir name="public"> <ram/> </dir>
			</vfs>
			<policy label="depot_query -> depot"     root="/depot"  writeable="no"/>
			<policy label="depot_download -> depot"  root="/depot"  writeable="yes"/>
			<policy label="depot_download -> public" root="/public" writeable="yes"/>
			<policy label="fs_rom -> " root="/depot" writeable="no"/>
		</config>
	</start>

	<start name="report_rom">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Report"/> <service name="ROM"/> </provides>
		<config verbose="no">
			<!-- reported by update_manager -->
			<policy label_suffix="-> installation"
				report="update_manager -> installation"/>
			<policy label="depot_deploy -> config"
				report="update_manager -> deploy.config"/>

			<!-- reported by depot_download -->
			<policy label="update_manager -> download_state"
				report="depot_download -> state"/>

			<!-- reported by depot_{deploy,query} -->
			<policy label="depot_deploy -> blueprint"
				report="depot_query -> blueprint"/>
			<policy label="depot_query -> query"
				report="depot_deploy -> query"/>
			<policy label="dynamic -> config"
				report="depot_deploy -> init.config"/>
		</config>
	</start>

	<start name="depot_download" caps="2000">
		<binary name="init"/>
		<resource name="RAM" quantum="70M"/>
		<route>
			<service name="ROM" label="config">
				<parent label="depot_download.config"/> </service>
			<service name="ROM" label_suffix="-> installation">
				<child name="report_rom"/> </service>
			<service name="Report">      <child name="report_rom"/> </service>
			<service name="Nic">         <child name="nic_router"/> </service>
			<service name="File_system"> <child name="vfs"/>        </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

	<start name="fs_rom">
		<resource name="RAM" quantum="4M"/>
		<provides> <service name="ROM"/> </provides>
	</start>

	<start name="depot_query">
		<resource name="RAM" quantum="2M"/>
		<config query="rom">
			<vfs> <dir name="depot"> <fs label="depot"/> </dir> </vfs>
		</config>
		<route>
			<service name="ROM" label="query"> <child name="report_rom"/> </service>
			<service name="Report">            <child name="report_rom"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

	<start name="depot_deploy">
		<resource name="RAM" quantum="1M"/>
		<route>
			<service name="ROM" label="blueprint">
				<child name="report_rom"/> </service>
			<service name="ROM" label="config">
				<child name="report_rom"/> </service>
			<service name="Nic">    <child name="nic_router"/> </service>
			<service name="Uplink"> <child name="nic_router"/> </service>
			<service name="Report"> <child name="report_rom"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

	<start name="dynamic" caps="2000">
		<binary name="init"/>
		<resource name="RAM" quantum="20M"/>
		<provides> <service name="ROM"/> </provides>
		<route>
			<service name="ROM" label_last="ld.lib.so"> <parent/> </service>
			<service name="ROM" label_last="init">      <parent/> </service>
			<service name="ROM" label="config">
				<child name="report_rom"/>
			</service>
			<service name="Nic">   <child name="nic_router"/> </service>
			<service name="Uplink"><child name="nic_router"/> </service>
			<service name="Report"><child name="update_manager"/> </service>
			<service name="ROM">   <child name="fs_rom"/> </service>
			<service name="Timer"> <child name="timer"/>  </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

	<start name="update_manager">
		<resource name="RAM" quantum="10M"/>
		<provides>
			<service name="Report"/>
		</provides>
		<config arch="} [depot_spec] {">
			<static>
				<parent-provides>
					<service name="ROM"/>
					<service name="CPU"/>
					<service name="PD"/>
					<service name="LOG"/>
					<service name="Timer"/>
					<service name="Nic"/>
					<service name="Uplink"/>
					<service name="Report"/>
				</parent-provides>
			</static>
			<common_routes>
				<service name="ROM" label_last="ld.lib.so"> <parent/> </service>
				<service name="ROM" label_last="init">      <parent/> </service>
				<service name="CPU">   <parent/> </service>
				<service name="PD">    <parent/> </service>
				<service name="LOG">   <parent/> </service>
				<service name="Timer"> <parent/> </service>
				<service name="Nic">   <parent/> </service>
				<service name="Uplink"><parent/> </service>
				<service name="Report"><parent/> </service>
			</common_routes>
			<app name="app1">
				<variant pkg="jschlatow/pkg/update_manager_example/2022-08-09" delay_ms="100"/>
				<variant pkg="jschlatow/pkg/update_manager_example/2022-08-09" retry="2"/>
			</app>
		</config>
		<route>
			<service name="Report">
				<child name="report_rom"/> </service>
			<service name="ROM" label="download_state">
				<child name="report_rom"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>


</config>}


install_config $config

build { app/update_manager }

append boot_modules { update_manager }

build_boot_image $boot_modules

append qemu_args " -nographic "
append_qemu_nic_args

run_genode_until "Error: app1: stopped" 60

grep_output {\[init -\> update_manager}
compare_output_to {
[init -> update_manager] add to download queue: jschlatow/pkg/update_manager_example/2022-08-09
[init -> update_manager] add to download queue: jschlatow/pkg/update_manager_example/2022-08-09
[init -> update_manager] app1: deploying jschlatow/pkg/update_manager_example/2022-08-09
[init -> update_manager] app1: deploying jschlatow/pkg/update_manager_example/2022-08-09
[init -> update_manager] Error: app1: startup failed
[init -> update_manager] Warning: app1: execution failure in jschlatow/pkg/update_manager_example/2022-08-09
[init -> update_manager] Warning: app1: switching to jschlatow/pkg/update_manager_example/2022-08-09
[init -> update_manager] app1: deploying jschlatow/pkg/update_manager_example/2022-08-09
[init -> update_manager] Warning: app1: execution failure in jschlatow/pkg/update_manager_example/2022-08-09
[init -> update_manager] app1: deploying jschlatow/pkg/update_manager_example/2022-08-09
[init -> update_manager] Warning: app1: execution failure in jschlatow/pkg/update_manager_example/2022-08-09
[init -> update_manager] app1: deploying jschlatow/pkg/update_manager_example/2022-08-09
[init -> update_manager] Warning: app1: execution failure in jschlatow/pkg/update_manager_example/2022-08-09
[init -> update_manager] Error: app1: stopped
}

